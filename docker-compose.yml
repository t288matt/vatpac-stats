services:
  # PostgreSQL Database for VATSIM data
  postgres:
    image: postgres:16-alpine
    container_name: vatsim_postgres
    environment:
      POSTGRES_DB: vatsim_data
      POSTGRES_USER: vatsim_user
      POSTGRES_PASSWORD: vatsim_password
    volumes:
      - ./database/vatsim:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    #check postgres is up before allowing app to connect
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 60s        # Much more lenient for CI/CD
      timeout: 30s         # Much more lenient for CI/CD
      retries: 15          # More retries for CI/CD
      start_period: 120s   # Much longer grace period for CI/CD

  # Main Application (API-First Architecture)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vatsim_app
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://vatsim_user:vatsim_password@postgres:5432/vatsim_data
      
      # Simplified Architecture - Sprint 2 Completed
      LOG_LEVEL: "INFO"
      
      # Production Settings
      PRODUCTION_MODE: "true"
      
      # Performance Settings
      MEMORY_LIMIT_MB: 2048
      BATCH_SIZE_THRESHOLD: 10000
      
      # VATSIM Data Collection Intervals (seconds)
      VATSIM_POLLING_INTERVAL: 60    # How often to fetch VATSIM data (60 seconds)

      WRITE_TO_DISK_INTERVAL: 30    # How often to write data to disk (2 minutes)
      VATSIM_API_TIMEOUT: 60         # VATSIM API timeout in seconds
      VATSIM_API_RETRY_ATTEMPTS: 20   # Number of retry attempts for VATSIM API
      
      # Cache Optimization
      CACHE_MAX_SIZE: 50000          # Increase cache capacity
      
      # Optional: More aggressive caching for static data

      
      # Database Configuration
      DATABASE_POOL_SIZE: 20         # Database connection pool size (optimized)
      DATABASE_MAX_OVERFLOW: 40      # Database max overflow connections (optimized)
      DATABASE_POOL_TIMEOUT: 10      # Database pool timeout in seconds (optimized)
      DATABASE_ECHO: "false"         # Enable SQL echo for debugging
      
      # API Configuration
      API_WORKERS: 4                 # Number of API workers
      API_DEBUG: "false"             # Enable API debug mode
      API_RELOAD: "false"            # Enable API auto-reload
      CORS_ORIGINS: "*"              # CORS allowed origins
      
      # Simplified Service Architecture
      # Over-engineered service management removed - direct service initialization
      
      # Logging Configuration
      LOG_FORMAT: "json"
      LOG_MAX_FILE_SIZE: 10485760    # 10MB in bytes
      LOG_BACKUP_COUNT: 5
      

      
      # Geographic Boundary Filter Configuration (Polygon-based)
      ENABLE_BOUNDARY_FILTER: "true"
      BOUNDARY_DATA_PATH: "config/australian_airspace_polygon.json"
      BOUNDARY_FILTER_LOG_LEVEL: "INFO"
      BOUNDARY_FILTER_PERFORMANCE_THRESHOLD: "10.0"
      
      # Callsign Pattern Filter Configuration
      EXCLUDED_CALLSIGN_PATTERNS: "ATIS"
      
      # Flight Summary System Configuration
      FLIGHT_SUMMARY_ENABLED: "true"          # Enable flight summary processing
      FLIGHT_COMPLETION_HOURS: 14              # Hours after logon to mark flight as complete
      FLIGHT_RETENTION_HOURS: 168             # Hours to keep detailed flight data (7 days)
      FLIGHT_SUMMARY_INTERVAL: 60              # Minutes between summary processing (1 hour)
      SECTOR_TRACKING_ENABLED: "true"         # Enable real-time sector occupancy tracking
      SECTOR_UPDATE_INTERVAL: 60              # Seconds between sector position updates (1 minute)
      
      # Cleanup Configuration
      # How long (in seconds) a flight must be without updates before being considered "stale"
      # Stale flights have their open sector entries automatically closed with last known position
      # Default: 300 seconds (5 minutes) - adjust based on VATSIM data update frequency
      CLEANUP_FLIGHT_TIMEOUT: 300

      # Controller Summary Configuration
      CONTROLLER_SUMMARY_ENABLED: "true"
      CONTROLLER_COMPLETION_MINUTES: "30"
      CONTROLLER_RETENTION_HOURS: "168"
      CONTROLLER_SUMMARY_INTERVAL: "60"


    volumes:
      - ./logs:/app/logs:rw
      - ./config/australian_airspace_polygon.json:/app/airspace_sector_data/australian_airspace_polygon.json:ro
      - ./config/australian_airspace_sectors.geojson:/app/airspace_sector_data/australian_airspace_sectors.geojson:ro
      - ./config/controller_callsigns_list.txt:/app/airspace_sector_data/controller_callsigns_list.txt:ro
      - ./config/init.sql:/app/database/init.sql:ro
      # REMOVE FOR PRODUCTION - Test and debug files
      - ./pytest.ini:/app/pytest.ini:ro
      - ./tests:/app/tests:ro
    ports:
      - "8001:8001"
      #wait for postgres to be ready
    depends_on:
      postgres:
        condition: service_healthy

    restart: unless-stopped




  # Metabase for business intelligence and analytics
  metabase:
    image: metabase/metabase:latest
    container_name: vatsim_metabase
    hostname: metabase
    volumes:
      - /dev/urandom:/dev/random:ro
      - metabase_data:/metabase-data
    ports:
      - "3030:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabaseappdb
      MB_DB_PORT: 5432
      MB_DB_USER: metabase
      MB_DB_PASS: mysecretpassword
      MB_DB_HOST: metabase_postgres
      # Additional Metabase configuration
      MB_ENCRYPTION_SECRET_KEY: "your-secret-key-here-change-in-production"
      MB_PASSWORD_COMPLEXITY: "strong"
      MB_PASSWORD_LENGTH: 10
      MB_JAVA_TIMEZONE: UTC
      MB_MAX_MEMORY_PERCENTAGE: 75
      MB_SESSION_TIMEOUT: 20160  # 14 days in minutes
      MB_SESSION_TIMEOUT_UNITS: minutes
    networks:
      - metanet1
      - default
    depends_on:
      metabase_postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: curl --fail -I http://localhost:3000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s

  # PostgreSQL Database for Metabase (separate instance)
  metabase_postgres:
    image: postgres:latest
    container_name: metabase_postgres
    hostname: metabase_postgres
    environment:
      POSTGRES_USER: metabase
      POSTGRES_DB: metabaseappdb
      POSTGRES_PASSWORD: mysecretpassword
    volumes:
      - ./database/metabase:/var/lib/postgresql/data
    networks:
      - metanet1
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U metabase -d metabaseappdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s



# Define named volumes
volumes:
  metabase_data:
    driver: local

# Define networks
networks:
  metanet1:
    driver: bridge 