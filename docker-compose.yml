services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vatsim_postgres
    environment:
      POSTGRES_DB: vatsim_data
      POSTGRES_USER: vatsim_user
      POSTGRES_PASSWORD: vatsim_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./tools/postgresql_write_optimized.conf:/etc/postgresql/postgresql.conf
      - ./tools/create_write_optimized_tables.sql:/docker-entrypoint-initdb.d/01-init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vatsim_user -d vatsim_data"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: vatsim_redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - ./data/redis:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vatsim_app
    environment:
      # Database and Cache
      DATABASE_URL: postgresql://vatsim_user:vatsim_password@postgres:5432/vatsim_data
      REDIS_URL: redis://redis:6379
      
      # API Configuration
      API_HOST: 0.0.0.0
      API_PORT: 8001
      LOG_LEVEL: INFO
      PYTHONUNBUFFERED: 1
      
      # VATSIM Data Collection Intervals (seconds)
      VATSIM_POLLING_INTERVAL: 60    # How often to fetch VATSIM data (1 minute)
      VATSIM_WRITE_INTERVAL: 300     # How often to write data to disk
      VATSIM_CLEANUP_INTERVAL: 3600  # How often to cleanup old data
    volumes:
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
      - ./backups:/app/backups:rw
      - ./data/cache:/app/cache:rw
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Grafana for data visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: vatsim_grafana
    user: "1000:1000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_AUTH_DISABLE_LOGIN_FORM: true
      GF_AUTH_OAUTH_AUTO_LOGIN: true
      GF_AUTH_BASIC_ENABLED: false
      GF_AUTH_ANONYMOUS_ORG_NAME: Main Org.
      GF_DEFAULT_LOCALE: en-GB
      GF_USERS_DEFAULT_THEME: light
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
    ports:
      - "3050:3000"
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped 