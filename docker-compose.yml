services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: vatsim_postgres
    environment:
      POSTGRES_DB: vatsim_data
      POSTGRES_USER: vatsim_user
      POSTGRES_PASSWORD: vatsim_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./tools/postgresql_write_optimized.conf:/etc/postgresql/postgresql.conf
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]

  # Main Application (API-First Architecture)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vatsim_app
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://vatsim_user:vatsim_password@postgres:5432/vatsim_data
      
      # Simplified Architecture - Sprint 2 Completed
      LOG_LEVEL: "WARNING"
      
      # Production Settings
      PRODUCTION_MODE: "true"
      
      # Performance Settings
      MEMORY_LIMIT_MB: 2048
      BATCH_SIZE_THRESHOLD: 10000
      
      # VATSIM Data Collection Intervals (seconds)
      VATSIM_POLLING_INTERVAL: 60    # How often to fetch VATSIM data (60 seconds)

      WRITE_TO_DISK_INTERVAL: 30    # How often to write data to disk (2 minutes)
      VATSIM_API_TIMEOUT: 60         # VATSIM API timeout in seconds
      VATSIM_API_RETRY_ATTEMPTS: 20   # Number of retry attempts for VATSIM API
      
      # Cache Optimization
      CACHE_MAX_SIZE: 50000          # Increase cache capacity
      
      # Optional: More aggressive caching for static data

      
      # Database Configuration
      DATABASE_POOL_SIZE: 20         # Database connection pool size (optimized)
      DATABASE_MAX_OVERFLOW: 40      # Database max overflow connections (optimized)
      DATABASE_POOL_TIMEOUT: 10      # Database pool timeout in seconds (optimized)
      DATABASE_ECHO: "false"         # Enable SQL echo for debugging
      
      # API Configuration
      API_WORKERS: 4                 # Number of API workers
      API_DEBUG: "false"             # Enable API debug mode
      API_RELOAD: "false"            # Enable API auto-reload
      CORS_ORIGINS: "*"              # CORS allowed origins
      
      # Simplified Service Architecture
      # Over-engineered service management removed - direct service initialization
      
      # Logging Configuration
      LOG_FORMAT: "json"
      LOG_MAX_FILE_SIZE: 10485760    # 10MB in bytes
      LOG_BACKUP_COUNT: 5
      

      
      # Geographic Boundary Filter Configuration (Polygon-based)
      ENABLE_BOUNDARY_FILTER: "true"
      BOUNDARY_DATA_PATH: "australian_airspace_polygon.json"
      BOUNDARY_FILTER_LOG_LEVEL: "WARNING"
      BOUNDARY_FILTER_PERFORMANCE_THRESHOLD: "10.0"
      
      # Callsign Pattern Filter Configuration
      EXCLUDED_CALLSIGN_PATTERNS: "ATIS"
      
      # Flight Summary System Configuration
      FLIGHT_SUMMARY_ENABLED: "true"          # Enable flight summary processing
      FLIGHT_COMPLETION_HOURS: 14              # Hours after logon to mark flight as complete
      FLIGHT_RETENTION_HOURS: 168             # Hours to keep detailed flight data (7 days)
      FLIGHT_SUMMARY_INTERVAL: 60              # Minutes between summary processing (1 hour)
      SECTOR_TRACKING_ENABLED: "true"         # Enable real-time sector occupancy tracking
      SECTOR_UPDATE_INTERVAL: 60              # Seconds between sector position updates (1 minute)




    volumes:
      - ./logs:/app/logs:rw
      - ./config/australian_airspace_polygon.json:/app/australian_airspace_polygon.json:ro
    ports:
      - "8001:8001"
    depends_on:
      - postgres
    restart: unless-stopped


  # Grafana for data visualization and monitoring
  grafana:
    image: grafana/grafana:10.2.0
    container_name: vatsim_grafana
    user: "1000:1000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_AUTH_DISABLE_LOGIN_FORM: true
      GF_AUTH_OAUTH_AUTO_LOGIN: true
      GF_AUTH_BASIC_ENABLED: false
      GF_AUTH_ANONYMOUS_ORG_NAME: Main Org.
      GF_DEFAULT_LOCALE: en-GB
      GF_USERS_DEFAULT_THEME: dark
      # Set to UTC to ensure dashboard displays database timestamps as UTC times
      # Database stores all timestamps in UTC, this prevents timezone conversion
      GF_USERS_DEFAULT_TIMEZONE: UTC
      # Error monitoring and observability
      GF_FEATURE_TOGGLES_ENABLE: "publicDashboards"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
    ports:
      - "3050:3000"
    depends_on:
      - app
    restart: unless-stopped


 

# Define named volumes
volumes:
  postgres_data:
    driver: local 