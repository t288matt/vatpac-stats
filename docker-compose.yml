services:
  # PostgreSQL Database for VATSIM data
  postgres:
    image: postgres:16-alpine
    container_name: vatsim_postgres
    environment:
      POSTGRES_DB: vatsim_data
      POSTGRES_USER: vatsim_user
      POSTGRES_PASSWORD: vatsim_password
    volumes:
      - ./database/vatsim:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    #check postgres is up before allowing app to connect
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vatsim_user -d vatsim_data"]
      interval: 10s        # Faster checks for CI/CD
      timeout: 5s          # Faster timeouts for CI/CD
      retries: 6           # Fewer retries for CI/CD
      start_period: 30s    # Shorter grace period for CI/CD

  # Main Application (API-First Architecture)
  app:
    build:                                     #dev only - remove for prod  
      context: .                                #dev only - remove for prod
      dockerfile: Dockerfile                    #dev only - remove for prod
  ## image: ghcr.io/t288matt/vatpac-stats:latest   #prod only  remove for dev
    container_name: vatsim_app
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://vatsim_user:vatsim_password@postgres:5432/vatsim_data
      
      LOG_LEVEL: "INFO"
      
      
      # Performance Settings
      MEMORY_LIMIT_MB: 2048
      BATCH_SIZE_THRESHOLD: 10000
      
      # VATSIM Data Collection Intervals (seconds)
      VATSIM_POLLING_INTERVAL: 60    # How often to fetch VATSIM data (60 seconds)
      VATSIM_API_RETRY_ATTEMPTS: 20   # Number of retry attempts for VATSIM API
      
            
      # Database Configuration
      DATABASE_POOL_SIZE: 20         # Database connection pool size (optimized)
      DATABASE_MAX_OVERFLOW: 40      # Database max overflow connections (optimized)
      
      
      # API Configuration
      API_WORKERS: 4                 # Number of API workers
      API_DEBUG: "false"             # Enable API debug mode
      API_RELOAD: "false"            # Enable API auto-reload
      CORS_ORIGINS: "*"              # CORS allowed origins
      
      # Simplified Service Architecture
      # Over-engineered service management removed - direct service initialization
      
      # Logging Configuration
      LOG_FORMAT: "json"
      LOG_MAX_FILE_SIZE: 10485760    # 10MB in bytes
      LOG_BACKUP_COUNT: 5
      

      
      # Geographic Boundary Filter Configuration (Polygon-based)
      ENABLE_BOUNDARY_FILTER: "true"
      BOUNDARY_FILTER_LOG_LEVEL: "INFO"
      BOUNDARY_FILTER_PERFORMANCE_THRESHOLD: "10.0"
      
      # Callsign Pattern Filter Configuration
      EXCLUDED_CALLSIGN_PATTERNS: "ATIS"
      
      # Flight Summary System Configuration (used by DataService)
      FLIGHT_SUMMARY_ENABLED: "true"          # Enable flight summary processing
      FLIGHT_COMPLETION_HOURS: 14              # Hours after logon to mark flight as complete
      FLIGHT_RETENTION_HOURS: 168             # Hours to keep detailed flight data (7 days)
      FLIGHT_SUMMARY_INTERVAL: 60              # Minutes between summary processing (1 hour)
      
      # Sector Tracking Configuration (used by DataService)
      SECTOR_TRACKING_ENABLED: "true"         # Enable real-time sector occupancy tracking
      SECTOR_UPDATE_INTERVAL: 60              # Seconds between sector position updates (1 minute)
      
      # Cleanup Configuration
      # How long (in seconds) a flight must be without updates before being considered "stale"
      # Stale flights have their open sector entries automatically closed with last known position
      # Default: 300 seconds (5 minutes) - adjust based on VATSIM data update frequency
      CLEANUP_FLIGHT_TIMEOUT: 300

      # Controller Summary Configuration (used by DataService)
      CONTROLLER_SUMMARY_ENABLED: "true"
      CONTROLLER_COMPLETION_MINUTES: "30"     # 30 minutes - this is when summaries are made and records archived
      CONTROLLER_RETENTION_HOURS: "168"
      CONTROLLER_SUMMARY_INTERVAL: "60"
      CONTROLLER_RECONNECTION_THRESHOLD_MINUTES: "5"  # Minutes to merge controller reconnections into one session
      
      # Shared Configuration for Both Detection Services
      # Used by: FlightDetectionService (ATC → Flight) AND ATCDetectionService (Flight → ATC)
      FLIGHT_DETECTION_TIME_WINDOW_SECONDS: "180"    # Time window for frequency matching (3 minutes)
      
      # Controller-specific proximity configuration (used by both services)
      # Both services use ControllerTypeDetector to get these ranges based on controller type
      CONTROLLER_PROXIMITY_GROUND_NM: "15"      # Ground controllers: 15nm (both services)
      CONTROLLER_PROXIMITY_TOWER_NM: "15"       # Tower controllers: 15nm (both services)
      CONTROLLER_PROXIMITY_APPROACH_NM: "60"    # Approach controllers: 60nm (both services)
      CONTROLLER_PROXIMITY_CENTER_NM: "400"     # Center controllers: 400nm (both services)
      CONTROLLER_PROXIMITY_FSS_NM: "1000"      # FSS controllers: 1000nm (both services)
      
      # Enable/disable controller-specific ranges (used by both services)
      ENABLE_CONTROLLER_SPECIFIC_RANGES: "true"
      
      # Fallback proximity for unknown controller types (used by both services)
      CONTROLLER_PROXIMITY_DEFAULT_NM: "30"


    volumes:
      - ./logs:/app/logs:rw
      - ./config/australian_airspace_polygon.json:/app/airspace_sector_data/australian_airspace_polygon.json:ro
      - ./config/australian_airspace_sectors.geojson:/app/airspace_sector_data/australian_airspace_sectors.geojson:ro
      - ./config/controller_callsigns_list.txt:/app/airspace_sector_data/controller_callsigns_list.txt:ro
      - ./config/init.sql:/app/database/init.sql:ro
      # REMOVE FOR PRODUCTION - Test and debug files
      - ./pytest.ini:/app/pytest.ini:ro
      - ./tests:/app/tests:ro
    ports:
      - "8001:8001"
      #wait for postgres to be ready
    depends_on:
      postgres:
        condition: service_healthy

    restart: unless-stopped








 