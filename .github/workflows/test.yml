name: VATSIM Data Collection System Tests
on: [push, pull_request]

jobs:
  test:
    name: Foundation + Core Functionality Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests shapely numpy
          echo "✅ Dependencies installed"
          
      - name: List test files
        run: |
          echo "🔍 Checking test files..."
          ls -la tests/
          echo "📁 Test directory contents:"
          find tests/ -type f -name "*.py"
          
      - name: Verify Python environment
        run: |
          echo "🐍 Python version:"
          python --version
          echo "📦 Python path:"
          python -c "import sys; print('\\n'.join(sys.path))"
          echo "🔧 Current directory:"
          pwd
          
      - name: Check Docker availability
        run: |
          echo "🐳 Checking Docker..."
          docker --version
          docker-compose --version || echo "docker-compose not found, trying alternative"
          which docker-compose || echo "docker-compose not in PATH"
          
      - name: Start Docker services
        run: |
          echo "🐳 Starting Docker services..."
          # Try docker-compose first, fallback to docker compose
          if command -v docker-compose &> /dev/null; then
            echo "Using docker-compose"
            docker-compose up -d postgres
          else
            echo "Using docker compose (newer syntax)"
            docker compose up -d postgres
          fi
          echo "⏳ Waiting for PostgreSQL to be ready..."
          sleep 30
          
      - name: Start application
        run: |
          echo "🚀 Starting VATSIM application..."
          # Try docker-compose first, fallback to docker compose
          if command -v docker-compose &> /dev/null; then
            echo "Using docker-compose"
            docker-compose up -d app
          else
            echo "Using docker compose (newer syntax)"
            docker compose up -d app
          fi
          echo "⏳ Waiting for application to be ready..."
          sleep 45
          
      - name: Verify services are running
        run: |
          echo "🔍 Checking service status..."
          # Try docker-compose first, fallback to docker compose
          if command -v docker-compose &> /dev/null; then
            docker-compose ps
            docker-compose logs app --tail=20
          else
            docker compose ps
            docker compose logs app --tail=20
          fi
          
      - name: Run Stage 1 Foundation Tests
        run: |
          echo "🧪 Running Stage 1 Foundation Tests..."
          cd tests
          python test_system_health.py
          
      - name: Run Stage 2 Core Functionality Tests
        run: |
          echo "🧪 Running Stage 2 Core Functionality Tests..."
          cd tests
          python test_user_workflows.py

      - name: Run Stage 3 Data Quality Tests
        run: |
          echo "🧪 Running Stage 3 Data Quality Tests..."
          cd tests
          python test_data_quality.py

      - name: Run pytest (all stages)
        run: |
          echo "🧪 Running tests with pytest..."
          python -m pytest tests/ -v --tb=short
          
      - name: Fallback Tests (if Docker fails)
        if: failure()
        run: |
          echo "🔄 Running fallback tests without Docker services..."
          echo "⚠️ Docker services failed, running basic validation tests"
          cd tests
          echo "🧪 Testing Python imports..."
          python -c "
          import sys
          import os
          sys.path.insert(0, os.getcwd())
          try:
              from test_system_health import SystemHealthTester
              from test_user_workflows import UserWorkflowTester
              print('✅ Test modules imported successfully')
          except Exception as e:
              print(f'❌ Test module import failed: {e}')
              sys.exit(1)
          "
          echo "✅ Fallback tests completed"
          
      - name: Test Results Summary
        if: always()
        run: |
          echo "📊 Test Execution Summary"
          echo "========================"
          echo "✅ Stage 1 Foundation Tests completed"
          echo "✅ Stage 2 Core Functionality Tests completed"
          echo "✅ Stage 3 Data Quality Tests completed"
          echo "🎯 Focus: System accessibility + User workflow validation + Data reliability"
          echo "🔍 Tests: System health, database, API endpoints, flight data, controller data, data freshness, data quality, business rules"
          
      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up Docker services..."
          # Try docker-compose first, fallback to docker compose
          if command -v docker-compose &> /dev/null; then
            echo "Using docker-compose for cleanup"
            docker-compose down || echo "docker-compose down failed, continuing..."
          else
            echo "Using docker compose for cleanup"
            docker compose down || echo "docker compose down failed, continuing..."
          fi
